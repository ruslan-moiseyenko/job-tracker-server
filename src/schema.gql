# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ApplicationStageType {
  color: String
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  order: Int!
  updatedAt: DateTime!
}

type AuthPayload {
  user: GqlUser
}

input BulkReorderStagesInputDto {
  """Array of stage IDs with their new orders"""
  stages: [StageOrderDto!]!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

type ChangeProfileType {
  firstName: String
  lastName: String
}

type Company {
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime!
  website: String
}

type CompanyType {
  createdAt: DateTime!
  description: String
  id: ID!
  industry: String
  name: String!
  updatedAt: DateTime!
  website: String
}

type ContactType {
  email: String
  firstName: String
  id: String!
  lastName: String
  phone: String
  position: String
  socialLinks: String
}

input CreateApplicationStageInputDto {
  """Stage color (hex)"""
  color: String

  """Stage description"""
  description: String

  """ID of stage to insert after (optional, defaults to end)"""
  insertAfter: String

  """Stage name"""
  name: String!
}

input CreateCompanyInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateJobApplicationInput {
  """Company ID to associate with this application"""
  companyId: String!

  """Current application stage ID"""
  currentStageId: String

  """Custom color for the application row"""
  customColor: String

  """Job description (markdown supported)"""
  jobDescription: String

  """Array of job posting links"""
  jobLinks: [String!]!

  """Job search ID this application belongs to"""
  jobSearchId: String!

  """Job position title"""
  positionTitle: String!

  """Expected salary"""
  salary: Int
}

input CreateJobSearchInput {
  description: String
  title: String!
}

input DateRangeInput {
  """End date of the range (inclusive)"""
  endDate: DateTime

  """Start date of the range (inclusive)"""
  startDate: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GqlUser {
  createdAt: DateTime!
  email: String!
  firstName: String
  id: ID!
  lastActiveSearchId: String
  lastName: String
  provider: String
  providerId: String
  updatedAt: DateTime!
}

type JobApplicationType {
  applicationDate: DateTime!
  company: CompanyType!
  createdAt: DateTime!
  currentStage: ApplicationStageType
  customColor: String
  id: ID!
  jobDescription: String
  jobLinks: [String!]!
  positionTitle: String!
  salary: Int
  updatedAt: DateTime!
}

input JobSearchFilterInput {
  dateRange: DateRangeInput
  hasApplications: Boolean
  title: String
}

type JobSearchType {
  createdAt: DateTime!
  description: String
  id: ID!
  title: String!
  updatedAt: DateTime!
}

input LoginInput {
  email: String!
  password: String!
}

input MoveStageInputDto {
  """Position to move to: "first", "last", or stage ID"""
  position: String!

  """Stage ID to move"""
  stageId: String!
}

type Mutation {
  bulkReorderStages(input: BulkReorderStagesInputDto!): [ApplicationStageType!]!
  changePassword(input: ChangePasswordInput!): Boolean!
  createApplicationStage(input: CreateApplicationStageInputDto!): ApplicationStageType!
  createCompany(createCompanyInput: CreateCompanyInput!): Company!
  createJobApplication(input: CreateJobApplicationInput!): JobApplicationType!
  createJobSearch(input: CreateJobSearchInput!): JobSearchType!
  deleteJobSearch(id: String!): JobSearchType!
  googleAuth: AuthPayload!
  googleAuthCallback(code: String!): OAuthSuccessResponse!
  login(input: LoginInput!): AuthPayload!
  logout(refreshToken: String): Boolean!
  moveStage(input: MoveStageInputDto!): ApplicationStageType!
  refreshToken(input: RefreshTokenInput): RefreshTokenResponse!
  register(input: RegisterInput!): AuthPayload!
  removeApplicationStage(id: String!): ApplicationStageType!
  removeCompany(id: Int!): Company!
  removeJobApplication(id: String!): JobApplicationType!
  removeOAuthConnection(connectionId: String!): Boolean!

  """Request to change email address. Sends verification code to new email."""
  requestEmailChange(input: RequestEmailChangeInput!): Boolean!

  """Request a password reset. Sends reset link to user's email."""
  requestPasswordReset(input: RequestPasswordResetInput!): Boolean!

  """Reset password using token received via email."""
  resetPassword(input: ResetPasswordInput!): Boolean!
  setLastActiveSearch(searchId: String!): Boolean!
  swapStageOrders(input: SwapStageOrdersInputDto!): [ApplicationStageType!]!
  updateApplicationStage(id: String!, input: UpdateApplicationStageInputDto!): ApplicationStageType!
  updateCompany(updateCompanyInput: UpdateCompanyInput!): Company!
  updateJobApplication(id: String!, input: UpdateJobApplicationInput!): JobApplicationType!
  updateJobSearch(id: String!, input: UpdateJobSearchInput!): JobSearchType!
  updateUserProfile(data: UserInput!): ChangeProfileType!

  """Verify email change with code received at new email address."""
  verifyEmailChange(input: VerifyEmailChangeInput!): Boolean!
}

type OAuthConnectionType {
  avatarUrl: String
  createdAt: DateTime!
  displayName: String
  id: String!
  provider: String!
  providerId: String!
}

type OAuthSuccessResponse {
  success: Boolean!
  user: GqlUser!
}

input PaginationInput {
  """Number of items to return (limit)"""
  limit: Int = 10

  """Number of items to skip (offset)"""
  offset: Int = 0
}

type Query {
  applicationStage(id: String!): ApplicationStageType
  applicationStages: [ApplicationStageType!]!
  company(id: Int!): Company!
  getAllContacts: [ContactType!]!
  getAllJobSearches(filter: JobSearchFilterInput, pagination: PaginationInput): [JobSearchType!]!
  getContactById(id: String!): ContactType
  getJobSearchById(id: String!): JobSearchType
  getLastActiveSearch: String
  getMyOAuthConnections: [OAuthConnectionType!]!
  jobApplication(id: String!): JobApplicationType
  jobApplications: [JobApplicationType!]!
  jobApplicationsBySearch(jobSearchId: String!): [JobApplicationType!]!
  me: GqlUser!
}

input RefreshTokenInput {
  refreshToken: String
}

type RefreshTokenResponse {
  success: Boolean!
}

input RegisterInput {
  email: String!
  firstName: String
  lastName: String
  password: String!
}

"""Input for requesting an email change"""
input RequestEmailChangeInput {
  """New email address to change to"""
  newEmail: String!
}

"""Input for requesting a password reset"""
input RequestPasswordResetInput {
  """Email address associated with the account"""
  email: String!
}

"""New password to set"""
input ResetPasswordInput {
  newPassword: String!
  token: String!
}

input StageOrderDto {
  """Stage ID"""
  id: String!

  """Order position"""
  order: Int!
}

input SwapStageOrdersInputDto {
  """First stage ID"""
  stageId1: String!

  """Second stage ID"""
  stageId2: String!
}

input UpdateApplicationStageInputDto {
  """Stage color (hex)"""
  color: String

  """Stage description"""
  description: String

  """Stage name"""
  name: String
}

input UpdateCompanyInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateJobApplicationInput {
  """Company ID to associate with this application"""
  companyId: String

  """Current application stage ID"""
  currentStageId: String

  """Custom color for the application row"""
  customColor: String

  """Job description (markdown supported)"""
  jobDescription: String

  """Array of job posting links"""
  jobLinks: [String!]

  """Job search ID this application belongs to"""
  jobSearchId: String

  """Job position title"""
  positionTitle: String

  """Expected salary"""
  salary: Int
}

input UpdateJobSearchInput {
  description: String
  title: String
}

input UserInput {
  firstName: String
  lastName: String
}

"""Input for verifying an email change request"""
input VerifyEmailChangeInput {
  """Verification code sent to the new email address (6 digits)"""
  verificationCode: String!
}