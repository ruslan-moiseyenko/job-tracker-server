// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(uuid())
  email              String   @unique
  password           String? // Make password optional for OAuth users
  firstName          String?  @map("first_name")
  lastName           String?  @map("last_name")
  lastActiveSearchId String?  @map("last_active_search_id") // for quick access to the last active search
  provider           String? // OAuth provider (e.g., 'google', 'github')
  providerId         String?  @map("provider_id") // OAuth provider's user ID
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // relations
  jobSearches         JobSearch[]
  applicationStages   ApplicationStage[]
  applicationStatuses ApplicationStatus[]
  companyNotes        CompanyNote[]
  comments            Comment[]
  event               Event[]
  token               Token[]
  userOAuthConnection UserOAuthConnection[]

  @@map("users")
}

model UserOAuthConnection {
  id          String   @id @default(uuid())
  provider    String // OAuth provider (e.g., 'google', 'github')
  providerId  String // OAuth provider's user ID
  displayName String? // User's display name from provider
  avatarUrl   String? // User's avatar URL from provider
  userData    Json? // Additional data from provider (optional)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relation to user
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@index([userId])
  @@map("user_oauth_connections")
}

// for every new job search
model JobSearch {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // relations
  userId       String           @map("user_id")
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications JobApplication[]

  @@index([userId])
  @@index([createdAt])
  @@map("job_searches")
}

model Token {
  token     String   @unique
  expDate   DateTime @map("exp_date")
  userAgent String   @map("user_agent")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expDate]) // For cleanup of expired tokens
  @@map("tokens")
}

model Company {
  id          String   @id @default(uuid())
  name        String   @unique
  website     String?
  industry    String?
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // relations
  applications         JobApplication[]
  notes                CompanyNote[]
  companyContactPerson CompanyContactPerson[]
  links                CompanyLink[]

  @@index([name]) // for quick search
  @@map("companies")
}

// links for a company (off site, profiles, job-boards, ect...)
model CompanyLink {
  id    String   @id @default(uuid())
  url   String
  title String?
  type  LinkType // link type (off site, LinkedIn, GitHub и т.д.)

  // connection to the company
  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([companyId])
  @@map("company_links")
}

// for specific vacancy
model JobApplication {
  id              String   @id @default(uuid())
  positionTitle   String   @map("position_title")
  jobDescription  String?  @map("job_description") // to keep formatted job description
  jobLinks        String[] @map("job_links") // array of links for the description
  applicationDate DateTime @default(now()) @map("application_date")
  customColor     String?  @map("custom_color") // color for the whole row in a table
  salary          Int? // optional salary field

  // relations
  jobSearchId    String             @map("job_search_id")
  jobSearch      JobSearch          @relation(fields: [jobSearchId], references: [id], onDelete: Cascade)
  companyId      String             @map("company_id")
  company        Company            @relation(fields: [companyId], references: [id])
  currentStageId String?            @map("current_stage_id")
  currentStage   ApplicationStage?  @relation(fields: [currentStageId], references: [id])
  finalStatusId  String?            @map("final_status_id")
  finalStatus    ApplicationStatus? @relation(fields: [finalStatusId], references: [id])

  comments       Comment[]
  contactPersons JobApplicationContactPerson[]
  Event          Event[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([companyId])
  @@index([jobSearchId])
  @@index([applicationDate])
  @@index([currentStageId])
  @@map("job_applications")
}

// adjustable stages
model ApplicationStage {
  id          String  @id @default(uuid())
  name        String
  description String?
  color       String
  order       Int // stages order

  // relations
  userId       String?          @map("user_id")
  user         User?            @relation(fields: [userId], references: [id])
  applications JobApplication[]
  Event        Event[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, name])
  @@index([userId, order])
  @@map("application_stages")
}

// status for the whole application process
model ApplicationStatus {
  id          String  @id @default(uuid())
  name        String
  description String?
  color       String
  isDefault   Boolean @default(false) @map("is_default")

  // relations
  userId       String?          @map("user_id")
  user         User?            @relation(fields: [userId], references: [id])
  applications JobApplication[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, name])
  @@index([isDefault])
  @@map("application_statuses")
}

// company's representative
model ContactPerson {
  id          String  @id @default(uuid())
  firstName   String? @map("first_name")
  lastName    String? @map("last_name")
  position    String?
  email       String?
  phone       String?
  socialLinks Json?   @map("social_links")

  // relations
  applications JobApplicationContactPerson[]
  companies    CompanyContactPerson[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([email])
  @@index([lastName, firstName]) // For name-based searches
  @@map("contact_persons")
}

// connections between a contact person and a company
model CompanyContactPerson {
  id              String        @id @default(uuid())
  companyId       String        @map("company_id")
  company         Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contactPersonId String        @map("contact_person_id")
  contactPerson   ContactPerson @relation(fields: [contactPersonId], references: [id], onDelete: Cascade)
  notes           String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([companyId, contactPersonId])
  @@map("company_contact_persons")
}

// connection between application and a contact person
model JobApplicationContactPerson {
  id               String         @id @default(uuid())
  jobApplicationId String         @map("job_application_id")
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  contactPersonId  String         @map("contact_person_id")
  contactPerson    ContactPerson  @relation(fields: [contactPersonId], references: [id], onDelete: Cascade)
  notes            String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([jobApplicationId, contactPersonId])
  @@map("job_application_contact_persons")
}

// comments to specific application
model Comment {
  id      String @id @default(uuid())
  content String

  // relations
  jobApplicationId String         @map("job_application_id")
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  userId           String         @map("user_id")
  user             User           @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([jobApplicationId])
  @@index([createdAt]) // For chronological sorting
  @@map("comments")
}

// notes, black/white list indicators
model CompanyNote {
  id            String  @id @default(uuid())
  content       String
  isBlacklisted Boolean @default(false) @map("is_blacklisted")
  isFavorite    Boolean @default(false) @map("is_favorite")

  // relations
  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([companyId, userId]) // only one note per company per user
  @@index([isBlacklisted])
  @@index([isFavorite])
  @@map("company_notes")
}

model Event {
  id          String    @id @default(uuid())
  title       String
  description String?
  startTime   DateTime  @map("start_time")
  endTime     DateTime? @map("end_time")
  location    String?
  isAllDay    Boolean   @default(false) @map("is_all_day")
  color       String?

  userId             String            @map("user_id")
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobApplicationId   String?           @map("job_application_id")
  jobApplication     JobApplication?   @relation(fields: [jobApplicationId], references: [id], onDelete: SetNull)
  applicationStageId String?           @map("application_stage_id")
  applicationStage   ApplicationStage? @relation(fields: [applicationStageId], references: [id])

  recurringPattern String? @map("recurring_pattern") // example: "RRULE:FREQ=WEEKLY;BYDAY=MO,WE,FR"
  recurringEventId String? @map("recurring_event_id") // ID parent's recurring event

  reminders EventReminder[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([jobApplicationId])
  @@index([startTime]) // For date range queries
  @@index([recurringEventId]) // For finding recurring event instances
  @@map("events")
}

model EventReminder {
  id               String           @id @default(uuid())
  timeBeforeEvent  Int              @map("time_before_event") // in minutes
  notificationType NotificationType @map("notification_type")

  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([eventId])
  @@map("event_reminders")
}

enum NotificationType {
  EMAIL
  PUSH
  BROWSER
}

enum LinkType {
  WEBSITE // Official site
  LINKEDIN
  GITHUB
  GLASSDOOR
  INDEED
  FACEBOOK
  TWITTER
  INSTAGRAM
  JOB_BOARD
  OTHER
}
