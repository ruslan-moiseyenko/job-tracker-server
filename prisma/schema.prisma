generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  password            String?
  firstName           String?               @map("first_name")
  lastName            String?               @map("last_name")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  provider            String?
  providerId          String?               @map("provider_id")
  lastActiveSearchId  String?               @map("last_active_search_id")
  applicationStages   ApplicationStage[]
  comments            Comment[]
  companies           Company[]
  event               Event[]
  jobSearches         JobSearch[]
  token               Token[]
  userOAuthConnection UserOAuthConnection[]

  @@map("users")
}

model UserOAuthConnection {
  id          String   @id @default(uuid())
  provider    String
  providerId  String
  userData    Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  userId      String   @map("user_id")
  avatarUrl   String?
  displayName String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@index([userId])
  @@map("user_oauth_connections")
}

model JobSearch {
  id           String           @id @default(uuid())
  title        String
  description  String?
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  userId       String           @map("user_id")
  applications JobApplication[]
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("job_searches")
}

model Token {
  token     String   @unique
  expDate   DateTime @map("exp_date")
  userAgent String   @map("user_agent")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expDate])
  @@map("tokens")
}

model Company {
  id                   String                 @id @default(uuid())
  name                 String
  website              String?
  description          String?
  companyNote          String?                @map("company_note")
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  userId               String                 @map("user_id")
  isBlacklisted        Boolean                @default(false) @map("is_blacklisted")
  isFavorite           Boolean                @default(false) @map("is_favorite")
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyContactPerson CompanyContactPerson[]
  links                CompanyLink[]
  applications         JobApplication[]

  @@unique([userId, name])
  @@index([userId, name])
  @@index([userId])
  @@index([userId, isFavorite])
  @@index([userId, isBlacklisted])
  @@map("companies")
}

model CompanyLink {
  id        String   @id @default(uuid())
  url       String
  title     String?
  type      LinkType
  companyId String   @map("company_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@map("company_links")
}

model JobApplication {
  id              String                        @id @default(uuid())
  positionTitle   String?                       @map("position_title")
  jobDescription  String?                       @map("job_description")
  jobLinks        String[]                      @map("job_links")
  applicationDate DateTime                      @default(now()) @map("application_date")
  customColor     String?                       @map("custom_color")
  jobSearchId     String                        @map("job_search_id")
  companyId       String                        @map("company_id")
  currentStageId  String?                       @map("current_stage_id")
  createdAt       DateTime                      @default(now()) @map("created_at")
  updatedAt       DateTime                      @updatedAt @map("updated_at")
  salary          Int?
  comments        Comment[]
  Event           Event[]
  contactPersons  JobApplicationContactPerson[]
  company         Company                       @relation(fields: [companyId], references: [id])
  currentStage    ApplicationStage?             @relation(fields: [currentStageId], references: [id])
  jobSearch       JobSearch                     @relation(fields: [jobSearchId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([jobSearchId])
  @@index([applicationDate])
  @@index([currentStageId])
  @@map("job_applications")
}

model ApplicationStage {
  id           String           @id @default(uuid())
  name         String
  description  String?
  color        String?
  order        Int
  userId       String?          @map("user_id")
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  user         User?            @relation(fields: [userId], references: [id])
  Event        Event[]
  applications JobApplication[]

  @@unique([userId, name])
  @@unique([userId, order])
  @@index([userId, order])
  @@map("application_stages")
}

// TODO: CHECK IF THIS IS NEEDED
model ContactPerson {
  id           String                        @id @default(uuid())
  firstName    String?                       @map("first_name")
  lastName     String?                       @map("last_name")
  position     String?
  email        String?
  phone        String?
  socialLinks  Json?                         @map("social_links")
  createdAt    DateTime                      @default(now()) @map("created_at")
  updatedAt    DateTime                      @updatedAt @map("updated_at")
  companies    CompanyContactPerson[]
  applications JobApplicationContactPerson[]

  @@index([email])
  @@index([lastName, firstName])
  @@map("contact_persons")
}

model CompanyContactPerson {
  id              String        @id @default(uuid())
  companyId       String        @map("company_id")
  contactPersonId String        @map("contact_person_id")
  notes           String?
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  company         Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contactPerson   ContactPerson @relation(fields: [contactPersonId], references: [id], onDelete: Cascade)

  @@unique([companyId, contactPersonId])
  @@map("company_contact_persons")
}

model JobApplicationContactPerson {
  id               String         @id @default(uuid())
  jobApplicationId String         @map("job_application_id")
  contactPersonId  String         @map("contact_person_id")
  notes            String?
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  contactPerson    ContactPerson  @relation(fields: [contactPersonId], references: [id], onDelete: Cascade)
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)

  @@unique([jobApplicationId, contactPersonId])
  @@map("job_application_contact_persons")
}

model Comment {
  id               String         @id @default(uuid())
  content          String
  jobApplicationId String         @map("job_application_id")
  userId           String         @map("user_id")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id])

  // TODO: check if needed to add compound index
  @@index([jobApplicationId])
  @@index([createdAt])
  @@map("comments")
}

model Event {
  id                 String            @id @default(uuid())
  title              String
  description        String?
  startTime          DateTime          @map("start_time")
  endTime            DateTime?         @map("end_time")
  location           String?
  isAllDay           Boolean           @default(false) @map("is_all_day")
  color              String?
  userId             String            @map("user_id")
  jobApplicationId   String?           @map("job_application_id")
  applicationStageId String?           @map("application_stage_id")
  recurringPattern   String?           @map("recurring_pattern")
  recurringEventId   String?           @map("recurring_event_id")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  reminders          EventReminder[]
  applicationStage   ApplicationStage? @relation(fields: [applicationStageId], references: [id])
  jobApplication     JobApplication?   @relation(fields: [jobApplicationId], references: [id])
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([jobApplicationId])
  @@index([startTime])
  @@index([recurringEventId])
  @@map("events")
}

model EventReminder {
  id               String           @id @default(uuid())
  timeBeforeEvent  Int              @map("time_before_event")
  notificationType NotificationType @map("notification_type")
  eventId          String           @map("event_id")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  event            Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@map("event_reminders")
}

enum NotificationType {
  EMAIL
  PUSH
  BROWSER
}

enum LinkType {
  WEBSITE
  LINKEDIN
  GITHUB
  GLASSDOOR
  INDEED
  FACEBOOK
  TWITTER
  INSTAGRAM
  JOB_BOARD
  OTHER
}
