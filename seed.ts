// seed.ts
import {
  ApplicationStage,
  Company,
  ContactPerson,
  JobApplication,
  JobSearch,
  LinkType,
  PrismaClient,
  User,
} from '@prisma/client';
import * as bcrypt from 'bcrypt';
import { faker } from '@faker-js/faker';

const prisma = new PrismaClient();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
const CONFIG = {
  USERS_COUNT: 5,
  MIN_SEARCHES_PER_USER: 2,
  MAX_SEARCHES_PER_USER: 3,
  MIN_APPLICATIONS_PER_SEARCH: 10,
  MAX_APPLICATIONS_PER_SEARCH: 30,
  COMPANIES_COUNT: 50, // –ë–æ–ª—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –±—ã–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
  DEFAULT_PASSWORD: 'Password123!', // –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
};

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ–ª—å—à–µ–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
const INDUSTRIES = [
  'Technology',
  'Finance',
  'Healthcare',
  'Education',
  'Retail',
  'Manufacturing',
  'Media',
  'Entertainment',
  'Logistics',
  'Consulting',
];

const POSITION_TITLES = [
  'Frontend Developer',
  'Backend Developer',
  'Full Stack Developer',
  'UI/UX Designer',
  'Product Manager',
  'QA Engineer',
  'DevOps Engineer',
  'Data Scientist',
  'Machine Learning Engineer',
  'Project Manager',
  'Software Architect',
  'Systems Administrator',
  'Mobile Developer',
  'Technical Writer',
  'Scrum Master',
  'Database Administrator',
];

const JOB_LINKS_DOMAINS = [
  'linkedin.com/jobs',
  'indeed.com',
  'glassdoor.com',
  'monster.com',
  'dice.com',
  'zip-recruiter.com',
  'angel.co',
  'remoteok.io',
  'stackoverflow.com/jobs',
];

async function main() {
  console.log('üå± Starting seed process...');

  // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∏–º —Ç–∞–±–ª–∏—Ü—ã
  await cleanDatabase();

  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–Ω–∞—á–∞–ª–∞
  const users = await createUsers();
  console.log(`‚úÖ Created ${users.length} users`);

  // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const companies = await createCompanies(users);
  console.log(`‚úÖ Created ${companies.length} companies`);

  // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —ç—Ç–∞–ø—ã (–æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö)
  const defaultStages = await createDefaultStages();
  console.log(`‚úÖ Created ${defaultStages.length} default application stages`);

  // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  for (const user of users) {
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —ç—Ç–∞–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userStages = await createUserStages(user.id);
    console.log(
      `‚úÖ Created ${userStages.length} stages for user ${user.email}`,
    );

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —ç—Ç–∞–ø—ã
    const allStages = [...defaultStages, ...userStages];

    // –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–∏ —Ä–∞–±–æ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const searchesCount = faker.number.int({
      min: CONFIG.MIN_SEARCHES_PER_USER,
      max: CONFIG.MAX_SEARCHES_PER_USER,
    });

    for (let i = 0; i < searchesCount; i++) {
      const jobSearch = await createJobSearch(user.id);
      console.log(
        `‚úÖ Created job search "${jobSearch.title}" for user ${user.email}`,
      );

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –ª–∏—Ü
      const contactPersons = await createContactPersons(20); // –°–æ–∑–¥–∞–µ–º –ø—É–ª –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –ª–∏—Ü

      // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞
      const applicationsCount = faker.number.int({
        min: CONFIG.MIN_APPLICATIONS_PER_SEARCH,
        max: CONFIG.MAX_APPLICATIONS_PER_SEARCH,
      });

      for (let j = 0; j < applicationsCount; j++) {
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é
        const company = faker.helpers.arrayElement(companies);

        // –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –æ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (faker.datatype.boolean(0.3)) {
          // 30% —à–∞–Ω—Å
          await createCompanyNote(company.id, user.id);
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        const application = await createJobApplication(
          jobSearch.id,
          company.id,
          faker.helpers.arrayElement(allStages).id,
        );

        // –î–æ–±–∞–≤–ª—è–µ–º 0-3 –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –ª–∏—Ü–∞ –∫ –∑–∞—è–≤–∫–µ
        const contactsCount = faker.number.int({ min: 0, max: 3 });
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∏—Ü–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        const selectedContactPersons = faker.helpers.arrayElements(
          contactPersons,
          contactsCount,
        );

        for (const contactPerson of selectedContactPersons) {
          await connectContactToApplication(application.id, contactPerson.id);

          // –ò–Ω–æ–≥–¥–∞ —Å–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏ —Å –∫–æ–º–ø–∞–Ω–∏–µ–π —Ç–æ–∂–µ
          if (faker.datatype.boolean(0.7)) {
            // 70% —à–∞–Ω—Å
            await connectContactToCompany(company.id, contactPerson.id);
          }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º 0-5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∑–∞—è–≤–∫–µ
        const commentsCount = faker.number.int({ min: 0, max: 5 });
        for (let k = 0; k < commentsCount; k++) {
          await createComment(application.id, user.id);
        }

        // –ò–Ω–æ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞—è–≤–∫–æ–π
        if (faker.datatype.boolean(0.4)) {
          // 40% —à–∞–Ω—Å
          const eventsCount = faker.number.int({ min: 1, max: 3 });
          for (let e = 0; e < eventsCount; e++) {
            await createEvent(
              user.id,
              application.id,
              faker.helpers.maybe(() => allStages[0].id, { probability: 0.3 }),
            );
          }
        }
      }
    }
  }

  console.log('‚úÖ Seed process completed successfully!');
}

// –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
async function cleanDatabase() {
  console.log('üßπ Cleaning database...');

  // –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω –∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
  await prisma.eventReminder.deleteMany();
  await prisma.event.deleteMany();
  await prisma.comment.deleteMany();
  await prisma.jobApplicationContactPerson.deleteMany();
  await prisma.companyContactPerson.deleteMany();
  await prisma.contactPerson.deleteMany();
  await prisma.companyLink.deleteMany();
  await prisma.jobApplication.deleteMany();
  await prisma.applicationStage.deleteMany();
  await prisma.jobSearch.deleteMany();
  await prisma.token.deleteMany();
  await prisma.company.deleteMany();
  await prisma.user.deleteMany();

  console.log('‚úÖ Database cleaned');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function createUsers(): Promise<User[]> {
  console.log('üë§ Creating users...');
  const users: User[] = [];

  const hashedPassword = await bcrypt.hash(CONFIG.DEFAULT_PASSWORD, 10);

  for (let i = 0; i < CONFIG.USERS_COUNT; i++) {
    const firstName = faker.person.firstName();
    const lastName = faker.person.lastName();

    const user = await prisma.user.create({
      data: {
        email: faker.internet.email({ firstName, lastName }).toLowerCase(),
        password: hashedPassword,
        firstName,
        lastName,
      },
    });

    users.push(user);
  }

  return users;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π
async function createCompanies(users: User[]): Promise<Company[]> {
  console.log('üè¢ Creating companies...');
  const companies: Company[] = [];

  for (let i = 0; i < CONFIG.COMPANIES_COUNT; i++) {
    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –∫ –∏–º–µ–Ω–∏ –∫–æ–º–ø–∞–Ω–∏–∏
    const companyName = `${faker.company.name()} ${faker.string.nanoid(5)}`;

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    const randomUser = faker.helpers.arrayElement(users);

    const company = await prisma.company.create({
      data: {
        name: companyName,
        website: faker.internet.url(),
        description: faker.company.catchPhrase(),
        userId: randomUser.id,
        // –°–æ–∑–¥–∞–µ–º 1-3 —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
        links: {
          create: Array.from(
            { length: faker.number.int({ min: 1, max: 3 }) },
            () => ({
              url: faker.internet.url(),
              title: faker.helpers.arrayElement([
                'Company website',
                'Career page',
                'About us',
                'LinkedIn profile',
              ]),
              type: faker.helpers.arrayElement(Object.values(LinkType)),
            }),
          ),
        },
      },
    });

    companies.push(company);
  }

  return companies;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã
async function createJobSearch(userId: string): Promise<JobSearch> {
  return prisma.jobSearch.create({
    data: {
      userId,
      title: faker.helpers.arrayElement([
        'Job Search 2025',
        `${faker.word.adjective()} Developer Positions`,
        `Search for ${faker.helpers.arrayElement(INDUSTRIES)} Jobs`,
        `${faker.helpers.arrayElement(['Spring', 'Summer', 'Fall', 'Winter'])} ${new Date().getFullYear()} Search`,
        `Job Search after ${faker.company.name()}`,
      ]),
      description: faker.helpers.maybe(() => faker.lorem.paragraph()),
    },
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ –∑–∞—è–≤–∫–∏
async function createDefaultStages(): Promise<ApplicationStage[]> {
  console.log('üìã Creating default application stages...');

  const defaultStages = [
    {
      name: 'CV Sended',
      description: 'Resume submitted to company',
      color: '#3498db',
      order: 1,
    },
    {
      name: 'Interview scheduled',
      description: 'Interview has been scheduled',
      color: '#f39c12',
      order: 2,
    },
    {
      name: 'Feedback awaited',
      description: 'Waiting for feedback after interview',
      color: '#9b59b6',
      order: 3,
    },
    // Final outcome stages
    {
      name: 'Offer',
      description: 'Received an offer',
      color: '#27ae60',
      order: 5,
    },
    {
      name: 'Rejected',
      description: 'Application rejected',
      color: '#c0392b',
      order: 99,
    },
  ];

  return Promise.all(
    defaultStages.map((stage) =>
      prisma.applicationStage.create({ data: stage }),
    ),
  );
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —ç—Ç–∞–ø–æ–≤ –∑–∞—è–≤–∫–∏
async function createUserStages(userId: string): Promise<ApplicationStage[]> {
  const userStages = [
    {
      name: 'Technical Task',
      description: 'Working on technical assignment',
      color: '#1abc9c',
      order: 3,
      userId,
    },
    {
      name: 'Final Interview',
      description: 'Final interview with management',
      color: '#34495e',
      order: 4,
      userId,
    },
  ];

  return Promise.all(
    userStages.map((stage) => prisma.applicationStage.create({ data: stage })),
  );
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –ª–∏—Ü
async function createContactPersons(count: number): Promise<ContactPerson[]> {
  console.log('üë• Creating contact persons...');

  const contactPersons: ContactPerson[] = [];

  for (let i = 0; i < count; i++) {
    const gender = faker.helpers.arrayElement(['male', 'female']);
    const firstName = faker.person.firstName(gender);
    const lastName = faker.person.lastName();

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è socialLinks –∫–∞–∫ JSON
    const socialLinksData: Record<string, string> = {};

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è
    const linkedinUrl = faker.helpers.maybe(
      () =>
        `https://linkedin.com/in/${firstName.toLowerCase()}-${lastName.toLowerCase()}-${faker.number.int(999)}`,
    );
    if (linkedinUrl) socialLinksData.linkedin = linkedinUrl;

    const twitterUrl = faker.helpers.maybe(
      () =>
        `https://twitter.com/${firstName.toLowerCase()}${faker.number.int(999)}`,
    );
    if (twitterUrl) socialLinksData.twitter = twitterUrl;

    const telegramHandle = faker.helpers.maybe(
      () =>
        `@${firstName.toLowerCase()}${lastName.substring(0, 1).toLowerCase()}${faker.number.int(999)}`,
    );
    if (telegramHandle) socialLinksData.telegram = telegramHandle;

    const contactPerson = await prisma.contactPerson.create({
      data: {
        firstName,
        lastName,
        position: faker.helpers.arrayElement([
          'Recruiter',
          'HR Manager',
          'Talent Acquisition Specialist',
          'Hiring Manager',
          'Technical Recruiter',
          'CEO',
          'CTO',
          'Team Lead',
          'Department Manager',
        ]),
        email: faker.internet.email({ firstName, lastName }).toLowerCase(),
        phone: faker.helpers.maybe(() => faker.phone.number()),
        socialLinks:
          Object.keys(socialLinksData).length > 0 ? socialLinksData : undefined,
      },
    });

    contactPersons.push(contactPerson);
  }

  return contactPersons;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
async function createJobApplication(
  jobSearchId: string,
  companyId: string,
  currentStageId: string,
): Promise<JobApplication> {
  const positionTitle = faker.helpers.arrayElement(POSITION_TITLES);

  // –°–æ–∑–¥–∞–µ–º 1-3 —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏
  const jobLinks = Array.from(
    { length: faker.number.int({ min: 1, max: 3 }) },
    () =>
      `https://${faker.helpers.arrayElement(JOB_LINKS_DOMAINS)}/job/${faker.number.int({ min: 100000, max: 999999 })}`,
  );

  // –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 6 –º–µ—Å—è—Ü–µ–≤)
  const applicationDate = faker.date.recent({ days: 180 });

  return prisma.jobApplication.create({
    data: {
      jobSearchId,
      companyId,
      positionTitle,
      jobDescription: `
# ${positionTitle}

## About the Role
${faker.lorem.paragraphs(3)}

## Requirements
${Array.from({ length: 5 }, () => `- ${faker.lorem.sentence()}`).join('\n')}

## Nice to Have
${Array.from({ length: 3 }, () => `- ${faker.lorem.sentence()}`).join('\n')}

## Benefits
${Array.from({ length: 4 }, () => `- ${faker.lorem.sentence()}`).join('\n')}
      `,
      jobLinks,
      applicationDate,
      currentStageId,
      customColor: faker.helpers.maybe(() => faker.color.rgb()),
    },
  });
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞ –∫ –∑–∞—è–≤–∫–µ
async function connectContactToApplication(
  applicationId: string,
  contactPersonId: string,
) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å–≤—è–∑—å
  const existingConnection = await prisma.jobApplicationContactPerson.findFirst(
    {
      where: {
        jobApplicationId: applicationId,
        contactPersonId,
      },
    },
  );

  if (!existingConnection) {
    return prisma.jobApplicationContactPerson.create({
      data: {
        jobApplicationId: applicationId,
        contactPersonId,
        notes: faker.helpers.maybe(() => faker.lorem.sentence()),
      },
    });
  }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞ –∫ –∫–æ–º–ø–∞–Ω–∏–∏
async function connectContactToCompany(
  companyId: string,
  contactPersonId: string,
) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å–≤—è–∑—å
  const existingConnection = await prisma.companyContactPerson.findFirst({
    where: {
      companyId,
      contactPersonId,
    },
  });

  if (!existingConnection) {
    return prisma.companyContactPerson.create({
      data: {
        companyId,
        contactPersonId,
        notes: faker.helpers.maybe(() => faker.lorem.sentence()),
      },
    });
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ
async function createComment(jobApplicationId: string, userId: string) {
  return prisma.comment.create({
    data: {
      jobApplicationId,
      userId,
      content: faker.helpers.arrayElement([
        faker.lorem.paragraph(),
        `Had an interview on ${faker.date.recent({ days: 30 }).toLocaleDateString()}. ${faker.lorem.sentence()}`,
        `Recruiter said: "${faker.lorem.sentence()}"`,
        `Need to prepare for technical interview on ${faker.date.soon({ days: 14 }).toLocaleDateString()}`,
        `Expected salary range: ${faker.number.int({ min: 70, max: 150 })}k-${faker.number.int({ min: 90, max: 180 })}k`,
        `Follow up sent on ${faker.date.recent({ days: 7 }).toLocaleDateString()}`,
        `Red flags: ${faker.lorem.sentence()}`,
      ]),
    },
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏
async function createCompanyNote(companyId: string, userId: string) {
  // Get the existing company
  const existingCompany = await prisma.company.findFirst({
    where: {
      id: companyId,
      userId,
    },
  });

  // If company doesn't exist or already has a note, skip
  if (!existingCompany || existingCompany.companyNote) {
    return existingCompany;
  }

  const isBlacklisted = faker.datatype.boolean(0.2); // 20% —à–∞–Ω—Å
  const isFavorite = !isBlacklisted && faker.datatype.boolean(0.3); // 30% —à–∞–Ω—Å, –µ—Å–ª–∏ –Ω–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ

  const companyNote = faker.helpers.arrayElement([
    faker.lorem.paragraph(),
    isBlacklisted
      ? `Avoid this company because: ${faker.lorem.sentence()}`
      : `Good company because: ${faker.lorem.sentence()}`,
    `Company culture: ${faker.lorem.sentence()}`,
    `Known for: ${faker.lorem.sentence()}`,
    `Glassdoor rating: ${faker.number.float({ min: 1, max: 5, fractionDigits: 1 })}/5`,
  ]);

  // Update company with flags and note
  return prisma.company.update({
    where: { id: companyId },
    data: {
      isBlacklisted,
      isFavorite,
      companyNote,
    },
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
async function createEvent(
  userId: string,
  jobApplicationId: string,
  applicationStageId: string | null = null,
) {
  // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
  const today = new Date();
  const sevenDaysAgo = new Date(today);
  sevenDaysAgo.setDate(today.getDate() - 7);

  const thirtyDaysLater = new Date(today);
  thirtyDaysLater.setDate(today.getDate() + 30);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è (–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–æ 30 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥)
  const startTime = faker.date.between({
    from: sevenDaysAgo,
    to: thirtyDaysLater,
  });

  // 30% —Å–æ–±—ã—Ç–∏–π –±—É–¥—É—Ç –∏–º–µ—Ç—å –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è
  const hasEndTime = faker.datatype.boolean(0.3);
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º undefined –≤–º–µ—Å—Ç–æ null –¥–ª—è endTime
  let endTime: Date | undefined = undefined;

  if (hasEndTime) {
    // –ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç 30 –º–∏–Ω—É—Ç –¥–æ 3 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞
    endTime = new Date(
      startTime.getTime() + faker.number.int({ min: 30, max: 180 }) * 60000,
    );
  }

  // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
  const event = await prisma.event.create({
    data: {
      userId,
      jobApplicationId,
      applicationStageId,
      title: faker.helpers.arrayElement([
        'Interview',
        'Technical Interview',
        'HR Screening',
        'Follow-up Call',
        'Test Assignment Deadline',
        'Meeting with Team',
        'Feedback Discussion',
        'Offer Negotiation',
      ]),
      description: faker.helpers.maybe(() => faker.lorem.sentence(), {
        probability: 0.7,
      }),
      startTime,
      endTime,
      location: faker.helpers.maybe(() =>
        faker.helpers.arrayElement([
          faker.location.streetAddress(),
          'Google Meet',
          'Zoom Call',
          'Microsoft Teams',
          'Skype',
          'Phone Call',
        ]),
      ),
      isAllDay: faker.datatype.boolean(0.2), // 20% —à–∞–Ω—Å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
      color: faker.helpers.maybe(() => faker.color.rgb()),
      recurringPattern: faker.helpers.maybe(
        () =>
          faker.helpers.arrayElement([
            'RRULE:FREQ=WEEKLY;COUNT=4;BYDAY=MO',
            'RRULE:FREQ=DAILY;COUNT=5',
            'RRULE:FREQ=WEEKLY;UNTIL=20251231T000000Z;BYDAY=WE',
          ]),
        { probability: 0.1 },
      ), // 10% —à–∞–Ω—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Å–æ–±—ã—Ç–∏–µ
    },
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–æ—Ç 0 –¥–æ 2)
  const remindersCount = faker.number.int({ min: 0, max: 2 });

  if (remindersCount > 0) {
    for (let i = 0; i < remindersCount; i++) {
      await prisma.eventReminder.create({
        data: {
          eventId: event.id,
          timeBeforeEvent: faker.helpers.arrayElement([15, 30, 60, 120, 1440]), // –º–∏–Ω—É—Ç—ã (15 –º–∏–Ω, 30 –º–∏–Ω, 1 —á–∞—Å, 2 —á–∞—Å–∞, 1 –¥–µ–Ω—å)
          notificationType: faker.helpers.arrayElement([
            'EMAIL',
            'PUSH',
            'BROWSER',
          ]),
        },
      });
    }
  }

  return event;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
main()
  .catch((e) => {
    console.error('Error during seed process:', e);
    process.exit(1);
  })
  .finally(() => {
    prisma.$disconnect().catch((e) => {
      console.error('Error during disconnect:', e);
    });
  });
